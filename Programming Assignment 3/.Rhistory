best("LA", outcome)
source("best.R")
source("best.R")
?not
if !(state %in% state.abb) {    return message("getting cached data")        }
source("best.R")
?if
source("best.R")
?==
source("best.R")
source("best.R")
source("best.R")
?%in%
source("best.R")
best <- function(state, outcome) {        ## Read outcome data        if (!is.element(state, state.abb)) {        return message("getting cached data")            }            ## Check that state and outcome are valid        ## Return hospital name in that state with lowest 30-day death    ## rate    }
?error
?error
!is.element("AL", state.abb)
!is.element("LA", state.abb)
!is.element("OO", state.abb)
!is.element("BB", state.abb)
source("best.R")
source("best.R")
source("best.R")
best <- function(state, outcome) {        ## Read outcome data        if (T) {        return message("invalid state")    }            ## Check that state and outcome are valid        ## Return hospital name in that state with lowest 30-day death    ## rate    outcome}
best <- function(state, outcome) {        ## Read outcome data        if (T) {        return message("invalid state")    }            ## Check that state and outcome are valid        ## Return hospital name in that state with lowest 30-day death    ## rate    state}
best <- function(state, outcome) {}
best <- function(state, outcome) {
## Read outcome data
}
best <- function(state, outcome) {        ## Read outcome data                ## Check that state and outcome are valid        ## Return hospital name in that state with lowest 30-day death    ## rate    outcome}
best <- function(state, outcome) {        ## Read outcome data        if (!is.element(state, state.abb)) {        return message("invalid state")    }            ## Check that state and outcome are valid        ## Return hospital name in that state with lowest 30-day death    ## rate    outcome}
best <- function(state, outcome) {        ## Read outcome data                  ## Check that state and outcome are valid        ## Return hospital name in that state with lowest 30-day death    ## rate    outcome}
best <- function(state, outcome) {        ## Read outcome data              }
best <- function(state, outcome) {        ## Read outcome data}
best <- function(state, outcome) {        ## Read outcome data        }
best <- function(state, outcome) {              }
best <- function(state, outcome) {     }
best <- function(state, outcome) {}
best <- function(state, outcome) {}
makeCacheMatrix <- function(x = matrix()) {
## The function makeCacheMatrix takes a matrix x as the argument,
## the defaut value of which is an empty 1 by 1 matrix
## y is the potential inverse of x
inv <- NULL
## set is the function to set the value of the matrix, x
set <- function(y) {
x <<- y
## After reseting x, its inverse inv should be set to NULL
inv <<- NULL
}
## get is the function that get the value of the matrix, x
get <- function() x
## setinv is the function that set the value of the inverse, inv
setinv <- function(inverse) inv <<- inverse
## getinv is the function that get the value of the inverse, inv
getinv <- function() inv
## list the returned value of the function makeCacheMatrix,
## which is the list of functions to
## set the value of the matrix
## get the value of the matrix
## set the value of the inverse
## get the value of the inverse
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## get the inverse of the matrix of x by calling the function getinv in the list x
inv <- x$getinv()
## check if inv has already been calculated. If so, return the value
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## if inv has not been calculated,
## read the matrix of x into m
m <- x$get()
## caculate the inverse of m and save to inverse
inverse <- solve(m, ...)
## set the value of inverse in x with inverse by using the setinv function in x
x$setinv(inverse)
## return the inverse of the matrix
inverse
}
best <- function(state, outcome){    ## Read outcome data        }
best <- function(state, outcome){    }
best <- function(state, outcome){    }
best <- function(state, outcome){    state,    outcome}
best <- function(state, outcome){}
best <- function(state, outcome){}
best <- function(state, outcome){        }
best <- function(state, outcome){        }
cacheSolve <- function(x, ...) {
## get the inverse of the matrix of x by calling the function getinv in the list x
inv <- x$getinv()
## check if inv has already been calculated. If so, return the value
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## if inv has not been calculated,
## read the matrix of x into m
m <- x$get()
## caculate the inverse of m and save to inverse
inverse <- solve(m, ...)
## set the value of inverse in x with inverse by using the setinv function in x
x$setinv(inverse)
## return the inverse of the matrix
inverse
}
cacheSolve <- function(x, ...) {
## get the inverse of the matrix of x by calling the function getinv in the list x
inv <- x$getinv()
## check if inv has already been calculated. If so, return the value
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
## if inv has not been calculated,
## read the matrix of x into m
m <- x$get()
## caculate the inverse of m and save to inverse
inverse <- solve(m, ...)
## set the value of inverse in x with inverse by using the setinv function in x
x$setinv(inverse)
## return the inverse of the matrix
inverse
}
if (!is.element(state, state.abb)) {    return message("Error in best("BB", "heart attack") : invalid state")}
if (!is.element(state, state.abb)) {    return message("Error in best("BB", "heart attack") : invalid state")}
(!is.element(state, state.abb))
best <- function(state, outcome){    }
best <- function(state, outcome){}
best <- function(state, outcome){}
best
makeCacheMatrix <- function(x = matrix()) {
}
best <- function(state, outcome) {
}
best <- function(state, outcome) {    }
best <- function(state, outcome) {    }
best <- function(state, outcome) {    }
best <- function (a, b){
}
source("best.R")
?stop
geterrmessage()
stop(..., call. = TRUE, domain = NULL)
stop("lalala", call. = TRUE, domain = NULL)
stop(..., call. = TRUE, domain = "invalid state")
geterrmessage()
stop("lala", call. = F, domain = "invalid state")
?warning
?stop
source(best.R)
getwd()
?source
source("best.R")
best("BB", "heart attack")
best("NY", "hert attack")
table.all <- read.csv("outcome-of-care-measures.csv")
dim(table.all)
?column.name
?colname
?col.name
colnames(table.all)
table.state <- table.all(,State == "AL")
table.state <- table.all[,State == "AL"]
table.state <- table.all[,$State == "AL"]
table.state <- table.all[[,State == "AL"]
]
table.state <- table.all[State == "AL",]
table.state <- table.all[which(State == "AL"),]
sta <- table.all$State
dim(sta)
dim(table.all)
table.all$State
table.all[which(State == "AL"),]
table.all[,which(State == "AL")]
table.all$State=="TX"
table.all[which(State== "TX")]
colnames(table.all)
table.all[which(State== "TX")]
table.all[which(State== "TX"),]
truth.state <- table.all$State == "TX"
dim{truth.state}
dim(truth.state)
truth.state
truth.state <- table.all$State == "TX"
source("best.R")
best("TX", "heart failure")
best("TX", "heart failure")
data <- best("TX", "heart failure")
data$State
?min
min(c(5,8,12,1))
colnames(table.state)
colnames(table.all)
table.state
data&state
data$State
data$statedata$Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
> data$statedata$Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
data$Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
source("best.R")
best("TX", "heart attack")
source("best.R")
source("best.R")
source("best.R")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
data
mm <- data$statedata$Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
mm
source("best.R")
source("best.R")
source("best.R")
best("TX", "heart attack")
data[,15]
min <- min(data[,15])
?min
source("best.R")
best("TX", "heart attack")
min <- min(data[,15])
source("best.R")
best("TX", "heart attack")
> min <- min(data[,11])
min <- min(data[,11])
min(as.numeric(data[,11]))
source("best.R")
best("TX", "heart attack")
as.numeric(data[,11]) == min
min
source("best.R")
best("TX", "heart attack")
as.numeric(data[,11])
?min
data[,11]
?class
class(data[,11])
table(data[,11])
data[,11] != "Not Available"
ndata <- data[data[,11] != "Not Available",]
ndata[,11]
min(ndata[,11])
as.numeric(ndata[,11])
as.character(ndata[,11])
as.numeric(as.character(ndata[,11]))
data[,11] <- ndata[,11]
ndata[,11]
source("best.R")
best("TX", "heart attack")
ndata[,11] <- as.numeric(as.character(ndata[,11]))
ndata
min(ndata[,11])
ndata[,11]
m <- ndata[,11]
m
m
m <- min(ndata[,11])
m
ndata[(ndata[,11]) == m,]
(ndata[,11]) == m
dim(ndata[(ndata[,11]) == m,])
source("best.R")
best("TX", "heart attack")
?print
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
?trackback
?traceback
traceback()
debug(heart.attack)
best("TX", "heart attack")
debug(heart.attack)
?debug
undebug(heart.attack)
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
min(c("x","cod", "b"))
source("best.R")
best("TX", "heart attack")
colnames(ndata)
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart failure")
best("MD", "heart attack")
source("best.R")
best("MD", "pneumonia")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
?order
ndata <- ndata[order(11,2),]
ndata$11
ndata[,11]
ndata
dim(ndata)
dim{table.state}
dim(table.state)
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
?top
?top
?head
head(letters)
head(letters, n = -6L)
head(letters, n = 6L)
head(letters, n = 1)
head(letters, n = 1L)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
debug(rankhospital)
rankhospital("MD", "heart attack", "worst")
undebug(rankhospital)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
> rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", 5000)
source("rankhospital.R")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
?tapply
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
?str
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
table.all
dim(table.all)
ranking <- lapply(split(table.all, table.all[,7]), rank.heart.attack)
dim(ranking)
dim(split(table.all, table.all[,7]))
dim(split(table.all, table.all$State))
dim(split(table.all, c(1,2,3)))
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
split(table.all, table.all[,7])
dim(split(table.all, table.all[,7]))
str(split(table.all, table.all[,7]))
source("rankall.R")
head(rankall("heart attack", 20), 10)
?lapply
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
submit()
source("rankall.R")
head(rankall("heart attack", 20), 10)
h <- head(rankall("heart attack", 20), 10)
dim(h)
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
h
?as.data.frame
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
h
submit()
?data.frame
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
h
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
h
submit()
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
h
?rbind
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
h
source("rankall.R")
h <- head(rankall("heart attack", 20), 2)
h
?plyr
library(plyr)
install.packages("plyr")
library(plyr)
ranking
rbind.fill(ranking)
?Reduce
h
merge.all <- function(x, y)
merge(x, y, all=TRUE, by="Sample")
Reduce(merge.all, h)
rbind.fill(h)
source("rankall.R")
head(rankall("heart attack", 20), 10)
submit()
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
?is.character
source("rankall.R")
?is.character
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
submit()
source("rankall.R")
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
submit()
submit()
